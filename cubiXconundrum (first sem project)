#include <stdio.h>
#include <conio.h>
#include <windows.h>
#include <stdlib.h>
#include <time.h>

int global_a = 0;

// void move(board);
void box1()
{
    printf("* *  \n");
    printf("*\n");
    printf("* *  \n\n");
}

void box2()
{
    printf("     \n");
    printf("*   *\n");
    printf("* * *\n\n");
}

void box3()
{
    printf("*    \n");
    printf("*    \n");
    printf("* * * \n\n");
}

void box4()
{
    printf("* * *\n");
    printf("*    \n");
    printf("*    \n\n");
}

void box5()
{
    printf("     \n");
    printf("    *\n");
    printf("  * *\n\n");
}

void box6()
{
    printf("  * *\n");
    printf("    *\n");
    printf("     \n\n");
}

void box7()
{
    printf("    * \n");
    printf("    * \n");
    printf("    * \n\n");
}

void box8()
{
    printf("    * \n");
    printf("    * \n");
    printf("    * \n");
    printf("    * \n\n");
}

void box9()
{
    printf("     \n");
    printf("   * \n");
    printf("     \n\n");
}

void box10()
{
    printf("        \n");
    printf("* * * * \n");
    printf("        \n\n");
}

void box11()
{
    printf("      \n");
    printf("* * * \n");
    printf("      \n\n");
}

void box12()
{
    printf("* * * \n");
    printf("  *   \n");
    printf("  *   \n\n");
}

void box13()
{
    printf("*     \n");
    printf("* * * \n");
    printf("*     \n\n");
}

void box14()
{
    printf("*   \n");
    printf("* * \n");
    printf("*   \n\n");
}

void box15()
{
    printf("    * \n");
    printf("  * * \n");
    printf("    * \n\n");
}

int rnum()
{
    int number;
    number = rand() % 16;
    return number;
}
int randshp()
{
    switch (rnum())
    {
    case 1:
        printf("1\n");
        box1();
        break;
    case 2:
        printf("2\n");
        box2();
        break;
    case 3:
        printf("3\n");
        box3();
        break;
    case 4:
        printf("4\n");
        box4();
        break;
    case 5:
        printf("5\n");
        box5();
        break;
    case 6:
        printf("6\n");
        box6();
        break;
    case 7:
        printf("7\n");
        box7();
        break;
    case 8:
        printf("8\n");
        box8();
        break;
    case 9:
        printf("9\n");
        box9();
        break;
    case 10:
        printf("10\n");
        box10();
        break;
    case 11:
        printf("11\n");
        box11();
        break;
    case 12:
        printf("12\n");
        box12();
        break;
    case 13:
        printf("13\n");
        box13();
        break;
    case 14:
        printf("14\n");
        box14();
        break;
    case 15:
        printf("15\n");
        box15();
        break;
    default:
        break;
    }
}
void rshape()
{
    randshp();
}

int selectedbox()
{
    int a;
    printf("Enter the no of the box you want to select: ");
    scanf("%d", &a);
    global_a = a;

    system("cls");

    switch (global_a)
    {
    case 1:
        printf("You selected %d box\n", global_a);
        box1();
        break;
    case 2:
        printf("You selected %d box\n", global_a);
        box2();
        break;
    case 3:
        printf("You selected %d box\n", global_a);
        box3();
        break;
    case 4:
        printf("You selected %d box\n", global_a);
        box4();
        break;
    case 5:
        printf("You selected %d box\n", global_a);
        box5();
        break;
    case 6:
        printf("You selected %d box\n", global_a);
        box6();
        break;
    case 7:
        printf("You selected %d box\n", global_a);
        box7();
        break;
    case 8:
        printf("You selected %d box\n", global_a);
        box8();
        break;
    case 9:
        printf("You selected %d box\n", global_a);
        box9();
        break;
    case 10:
        printf("You selected %d box\n", global_a);
        box10();
        break;
    case 11:
        printf("You selected %d box\n", global_a);
        box11();
        break;
    case 12:
        printf("You selected %d box\n", global_a);
        box12();
        break;
    case 13:
        printf("You selected %d box\n", global_a);
        box13();
        break;
    case 14:
        printf("You selected %d box\n", global_a);
        box14();
        break;
    case 15:
        printf("You selected %d box\n", global_a);
        box15();
        break;
    default:
        printf("Invalid selection\n");
        break;
    }
}
// prints the grid!!
void printBoard(char board[9][9])
{
    system("cls");
    for (int i = 0; i < 9; i++)
    {
        for (int j = 0; j < 9; j++)
        {
            if (j == 2 || j == 5 || j == 8)
                printf("\33[96m  %c  |\33[0m", board[i][j]);
            else
                printf("  %c  |", board[i][j]);

            if (j == 8)
            {
                printf("\n");
                for (int k = 0; k < 9; k++)
                {
                    if (i == 2 || i == 5 || i == 8)
                        printf("\33[96m-----|\33[0m");
                    else if (k == 2 || k == 5 || k == 8)
                        printf("-----\33[96m|\33[0m");
                    else
                        printf("-----|");
                }
            }
        }
        printf("\n");
    }
}
void initializebox1(char board[9][9])
{
    int x=0, y=0;
    if (global_a == 1)
    {
        // Check if the initial position is free
        if (board[y][x] == ' ' && board[y][x + 1] == ' ' && board[y + 1][x] == ' ' && board[y + 2][x] == ' ' && board[y + 2][x + 1] == ' ')
        {
            board[y][x] = '*';
            board[y][x + 1] = '*';
            board[y + 1][x] = '*';
            board[y + 2][x] = '*';
            board[y + 2][x + 1] = '*';
        }
        int space = 0;
        printBoard(board); // Call printBoard initially
        while (space == 0)
        {
            if (_kbhit())
            {
                // Clear the pattern from its current position
                board[y][x] = ' ';
                board[y][x + 1] = ' ';
                board[y + 1][x] = ' ';
                board[y + 2][x] = ' ';
                board[y + 2][x + 1] = ' ';
                space = 0;

                int tempX = x;
                int tempY = y;
                // Get the key pressed
                switch (_getch())
                {
                case 72: // Up Arrow Key
                    if (tempY > 0)
                        tempY--;
                    break;
                case 80: // Down Arrow Key
                    if (tempY < 6)
                        tempY++;
                    break;
                case 75: // Left Arrow Key
                    if (tempX > 0)
                        tempX--;
                    break;
                case 77: // Right Arrow Key
                    if (tempX < 7)
                        tempX++;
                    break;
                case 32:
                    space++;
                    break;
                default:
                    break;
                }

                // Check if the new position is free
                if (board[tempY][tempX] == ' ' && board[tempY][tempX + 1] == ' ' && board[tempY + 1][tempX] == ' ' && board[tempY + 2][tempX] == ' ' && board[tempY + 2][tempX + 1] ==' ')
                {
                    // If the new position is free, move the pattern
                    x = tempX;
                    y = tempY;
                    board[y][x] = '*';
                    board[y][x + 1] = '*';
                    board[y + 1][x] = '*';
                    board[y + 2][x] = '*';
                    board[y + 2][x + 1] = '*';
                    printBoard(board); // Call printBoard after a move is made
                }
                else
                {
                    // If the new position is not free, put the pattern back to its original position
                    board[y][x] = '*';
                    board[y][x + 1] = '*';
                    board[y + 1][x] = '*';
                    board[y + 2][x] = '*';
                    board[y + 2][x + 1] = '*';
                }
            }
        }
    }
}void initializebox2(char board[9][9])
{
    int x=0, y=0;
    if (global_a == 2)
    {
        // Check if the initial position is free
        if (board[y][x] == ' ' && board[y][x + 1] == ' ' && board[y+1][x] == ' ' && board[y+1][x+1] == ' ' && board[y+1][x+2] == ' ')
        {
            // Initialize the pattern
            board[y][x] = '*';
            board[y][x + 1] = ' ';
            board[y][x + 2] = '*';
            board[y + 1][x] = '*';
            board[y + 1][x + 1] = '*';
            board[y + 1][x + 2] = '*';
        }
        int space = 0;
        printBoard(board); // Call printBoard initially
        while (space == 0)
        {
            if (_kbhit())
            {
                // Clear the pattern from its current position
                board[y][x] = ' ';
                board[y][x + 1] = ' ';
                board[y][x + 2] = ' ';
                board[y + 1][x] = ' ';
                board[y + 1][x + 1] = ' ';
                board[y + 1][x + 2] = ' ';
                space = 0;

                int tempX = x;
                int tempY = y;
                // Get the key pressed
                switch (_getch())
                {
                case 72: // Up Arrow Key
                    if (tempY > 0)
                        tempY--;
                    break;
                case 80: // Down Arrow Key
                    if (tempY < 7)
                        tempY++;
                    break;
                case 75: // Left Arrow Key
                    if (tempX > 0)
                        tempX--;
                    break;
                case 77: // Right Arrow Key
                    if (tempX < 6)
                        tempX++;
                    break;
                case 32:
                    space++;
                    break;
                default:
                    break;
                }

                // Check if the new position is free
                if (board[tempY][tempX] == ' ' && board[tempY][tempX + 1] == ' ' && board[tempY][tempX + 2] == ' ' && board[tempY + 1][tempX] == ' ' && board[tempY + 1][tempX + 1] == ' ' && board[tempY + 1][tempX + 2] == ' ')
                {
                    // If the new position is free, move the pattern
                    x = tempX;
                    y = tempY;
                    board[y][x] = '*';
                    board[y][x + 1] = ' ';
                    board[y][x + 2] = '*';
                    board[y + 1][x] = '*';
                    board[y + 1][x + 1] = '*';
                    board[y + 1][x + 2] = '*';
                    printBoard(board); // Call printBoard after a move is made
                }
                else
                {
                    // If the new position is not free, put the pattern back to its original position
                    board[y][x] = '*';
                    board[y][x + 1] = ' ';
                    board[y][x + 2] = '*';
                    board[y + 1][x] = '*';
                    board[y + 1][x + 1] = '*';
                    board[y + 1][x + 2] = '*';
                }
            }
        }
    }
}
void move(char board[9][9])
{
    if (global_a==1)
    initializebox1(board);
    else if (global_a==2)
    initializebox2(board);
}
int main()
{
    srand(time(NULL));

    char board[9][9] = {
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}};

    while (1)

    {
        for (int i = 0; i < 3; i++)

        {
            rshape();
        }

        selectedbox();

        printf("\n\n\n\n\n\n\n\n\n\n\n");
        move(board);
    }
    return 0;
}
